#!/bin/bash

# RAG Drive FTP Hub Performance Optimization Script
# This script runs multiple optimization procedures to improve application performance

set -e  # Exit immediately if a command exits with a non-zero status

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Function to print section header
print_header() {
    echo -e "\n${BLUE}=====================================================================${NC}"
    echo -e "${BLUE}  $1${NC}"
    echo -e "${BLUE}=====================================================================${NC}\n"
}

# Function to print status
print_status() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}✓ $2${NC}"
    else
        echo -e "${RED}✗ $2${NC}"
        if [ -n "$3" ]; then
            echo -e "${RED}  Error: $3${NC}"
        fi
    fi
}

# Optimize database
optimize_database() {
    print_header "Database Optimization"
    
    echo "Running database optimization..."
    if node scripts/optimize-db.js; then
        print_status 0 "Database optimization completed successfully"
    else
        print_status 1 "Database optimization failed"
    fi
}

# Run code performance audit
run_performance_audit() {
    print_header "Code Performance Audit"
    
    echo "Running performance audit..."
    if node scripts/performance-audit.js; then
        print_status 0 "Performance audit completed successfully"
    else
        print_status 1 "Performance audit failed"
    fi
}

# Clean temporary files
clean_temp_files() {
    print_header "Cleaning Temporary Files"
    
    # Clean npm cache
    echo "Cleaning npm cache..."
    npm cache clean --force
    print_status $? "npm cache cleaned"
    
    # Clean uploads temp files
    echo "Cleaning temporary upload files..."
    find uploads -type f -name "*.tmp" -delete
    print_status $? "Temporary upload files cleaned"
    
    # Clean logs older than 30 days
    echo "Cleaning old logs..."
    find logs -type f -name "*.log*" -mtime +30 -delete
    print_status $? "Old logs cleaned"
}

# Optimize static assets
optimize_static_assets() {
    print_header "Optimizing Static Assets"
    
    # Check if client/dist exists
    if [ -d "client/dist" ]; then
        # Calculate size before
        size_before=$(du -sh client/dist | awk '{print $1}')
        
        echo "Original size: $size_before"
        echo "Compressing and optimizing static assets..."
        
        # Compress CSS files
        if command -v cleancss &> /dev/null; then
            find client/dist -name "*.css" -exec sh -c 'cleancss -o "{}" "{}"' \;
            print_status $? "CSS files optimized"
        else
            echo -e "${YELLOW}cleancss not found, skipping CSS optimization${NC}"
        fi
        
        # Compress JS files
        if command -v terser &> /dev/null; then
            find client/dist -name "*.js" -exec sh -c 'terser "{}" -o "{}" --compress --mangle' \;
            print_status $? "JavaScript files optimized"
        else
            echo -e "${YELLOW}terser not found, skipping JS optimization${NC}"
        fi
        
        # Optimize images
        if command -v imagemin &> /dev/null; then
            echo "Optimizing image files..."
            find client/dist -type f \( -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" -o -name "*.gif" \) -exec imagemin {} --out-dir=$(dirname {}) \;
            print_status $? "Image files optimized"
        else
            echo -e "${YELLOW}imagemin not found, skipping image optimization${NC}"
        fi
        
        # Calculate size after
        size_after=$(du -sh client/dist | awk '{print $1}')
        echo "Optimized size: $size_after"
    else
        echo -e "${YELLOW}client/dist directory not found. Build the application first.${NC}"
    fi
}

# Update optimization report
update_optimization_report() {
    print_header "Updating Optimization Report"
    
    report_file="optimization_report.md"
    
    # Create report header
    cat > $report_file << EOF
# RAG Drive FTP Hub Optimization Report

**Date:** $(date +"%Y-%m-%d")  
**Generated By:** Optimization Script

## Optimization Summary

The following optimizations have been performed:

EOF
    
    # Add optimization details to report
    echo "- Database optimizations" >> $report_file
    echo "- Code performance improvements" >> $report_file
    echo "- Temporary file cleanup" >> $report_file
    echo "- Static asset optimization" >> $report_file
    
    # Add recommendations
    cat >> $report_file << EOF

## Recommendations

Based on the optimizations performed, consider the following additional improvements:

1. Implement a CDN for static asset delivery
2. Set up Redis caching for frequently accessed data
3. Consider database sharding if your data continues to grow
4. Implement server-side rendering for improved initial load times
5. Set up automated performance monitoring

## Next Steps

Review the detailed logs in the following files:
- Database optimization: logs/db-optimize.log
- Performance audit: logs/performance-audit.log

Run this optimization script regularly (recommended: weekly) to maintain optimal performance.
EOF
    
    print_status 0 "Optimization report updated: $report_file"
}

# Main function
main() {
    print_header "RAG Drive FTP Hub Performance Optimization"
    echo "This script will optimize various aspects of the RAG Drive FTP Hub application."
    echo
    
    # Create logs directory if it doesn't exist
    mkdir -p logs
    
    # Ask which optimizations to run
    echo "Select optimizations to run:"
    echo "1) All optimizations (recommended)"
    echo "2) Database optimization only"
    echo "3) Code performance audit only"
    echo "4) Clean temporary files only"
    echo "5) Optimize static assets only"
    echo
    read -p "Enter your choice (1-5): " optimization_choice
    
    case $optimization_choice in
        1)
            optimize_database
            run_performance_audit
            clean_temp_files
            optimize_static_assets
            update_optimization_report
            ;;
        2)
            optimize_database
            ;;
        3)
            run_performance_audit
            ;;
        4)
            clean_temp_files
            ;;
        5)
            optimize_static_assets
            ;;
        *)
            echo -e "${RED}Invalid choice. Exiting.${NC}"
            exit 1
            ;;
    esac
    
    print_header "Optimization Complete"
    echo -e "${GREEN}Performance optimization completed successfully!${NC}"
    echo
    echo "To improve performance further, consider the recommendations in the optimization report."
}

# Run the main function
main